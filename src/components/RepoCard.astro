---
import { Icon } from 'astro-icon';
import type { Example } from '../data/examples.js';

export type Props = Example;

const {
	title,
	sourceUrl,
	stackblitzUrl,
	codesandboxUrl,
	gitpodUrl,
	previewImage = '/previews/minimal.webp',
} = Astro.props;
---

<article
	class="relative bg-astro-gray-600 outline outline-1 -outline-offset-1 outline-astro-gray-100/10"
>
	<div class="noise z-0"></div>
	<div class="aspect-video bg-astro-gray-700">
		<img src={previewImage} alt="" class="object-cover object-left-top s-full" />
	</div>
	<div class="flex flex-col gap-4 p-5">
		<h2 class="heading-4">{title}</h2>
		<p>
			<a href={sourceUrl} class="inline-flex items-center gap-1">
				<Icon name="github" size={16} />
				<span class="text-sm text-astro-gray-200 underline underline-offset-[3px]"
					>View repo on GitHub</span
				>
			</a>
		</p>
		<hr class="border-astro-gray-100/10" />
		<div
			class="flex h-10 w-max min-w-0 max-w-full divide-x divide-astro-gray-600 rounded-full bg-blue-purple-gradient"
		>
			<a
				href={stackblitzUrl}
				target="_blank"
				rel="noopener noreferrer"
				class="bg-black/15 flex items-center gap-2 rounded-l-full px-4 text-sm transition hover:backdrop-brightness-75"
			>
				<Icon name="stackblitz" size={16} aria-hidden="true" /> Open in StackBlitz
			</a>
			<details class="relative z-10" data-card-options>
				<summary
					class="bg-black/15 flex h-full cursor-pointer list-none items-center rounded-r-full px-2 transition hover:backdrop-brightness-75"
				>
					<span class="sr-only">More options</span>
					<Icon name="chevron-down" size={20} aria-hidden="true" />
				</summary>
				<ul
					class="absolute right-0 top-full mt-2 flex w-max flex-col rounded bg-white p-2 text-astro-gray-700 shadow-md"
				>
					<a
						href={gitpodUrl}
						class="flex flex-row items-center gap-2 rounded-sm px-3 py-2 hover:bg-blue-purple-gradient hover:text-white"
					>
						<Icon name="gitpod" size={20} aria-hidden="true" /> Open in Gitpod
					</a>
					<a
						href={codesandboxUrl}
						class="flex flex-row items-center gap-2 rounded-sm px-3 py-1.5 hover:bg-blue-purple-gradient hover:text-white"
					>
						<Icon name="codesandbox" size={20} aria-hidden="true" /> Open in CodeSandbox
					</a>
				</ul>
			</details>
		</div>
	</div>
</article>

<script>
	const dropdowns = document.querySelectorAll<HTMLDetailsElement>('details[data-card-options]');

	window.addEventListener('click', (event) => {
		for (const dropdown of dropdowns) {
			if (dropdown.open && !dropdown.contains(event.target as Node)) {
				dropdown.open = false;
			}
		}
	});

	for (const dropdown of dropdowns) {
		const summary = dropdown.querySelector('summary') as HTMLElement;
		const focusableItems = dropdown.querySelectorAll<HTMLElement>('a, button');

		dropdown.addEventListener('keydown', (event) => {
			const previouslyHadFocus = dropdown.contains(document.activeElement);
			if (event.key === 'Escape') {
				dropdown.open = !dropdown.open;
				if (previouslyHadFocus) {
					summary.focus();
				}
			}
		});

		dropdown.addEventListener('keydown', (event) => {
			const currentIndex = Array.from(focusableItems).indexOf(
				document.activeElement as HTMLElement,
			);

			const modLooped = (n: number, m: number) => ((n % m) + m) % m;

			if (event.key === 'ArrowDown') {
				event.preventDefault();
				focusableItems[modLooped(currentIndex + 1, focusableItems.length)]?.focus();
			}
			if (event.key === 'ArrowUp') {
				event.preventDefault();
				focusableItems[modLooped(currentIndex - 1, focusableItems.length)]?.focus();
			}
		});

		summary.addEventListener('keydown', (event) => {
			if (event.key === 'ArrowDown') {
				event.preventDefault();
				event.stopPropagation();
				dropdown.open = true;
				focusableItems[0]?.focus();
			}
			if (event.key === 'ArrowUp') {
				event.preventDefault();
				event.stopPropagation();
				dropdown.open = true;
				focusableItems[focusableItems.length - 1]?.focus();
			}
		});

		for (const item of focusableItems) {
			item.addEventListener('blur', (event) => {
				if (!dropdown.contains(event.relatedTarget as Node) || event.relatedTarget === summary) {
					dropdown.open = false;
				}
			});
		}
	}
</script>

<style>
	details summary::-webkit-details-marker {
		display: none;
	}
</style>
